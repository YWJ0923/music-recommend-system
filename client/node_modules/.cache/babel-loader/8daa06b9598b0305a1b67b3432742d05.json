{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\React\\\\Music_Recommend_System\\\\front\\\\src\\\\pages\\\\Search\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Menu, Table, Button, Row, Col, Card } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { SERVER_URL } from '../../utils/constant';\nimport { playBarStore } from \"../../stores/playBarStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Meta\n} = Card;\nconst musicColomns = [{\n  dataIndex: 'musicName',\n  key: 'musicName',\n  title: '歌曲',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      onClick: () => {\n        playBarStore.addMusic(record);\n      },\n      style: {\n        padding: '0'\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }, this);\n  },\n  width: '300px'\n}, {\n  dataIndex: 'artistName',\n  key: 'artistName',\n  title: '歌手',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/artist/${record.artistId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }, this);\n  },\n  width: '200px'\n}, {\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this);\n  },\n  width: '200px'\n}, {\n  dataIndex: 'timeLength',\n  key: 'timeLength',\n  title: '时长',\n  render: text => {\n    text = parseInt(text);\n    text /= 1000;\n    var min = Math.floor(text / 60);\n\n    if (min < 10) {\n      min = '0' + min;\n    }\n\n    var sec = Math.floor(text % 60);\n\n    if (sec < 10) {\n      sec = '0' + sec;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: min + ':' + sec\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }, this);\n  },\n  width: '100px'\n}];\nconst albumColomns = [{\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: text,\n        style: {\n          width: '80px',\n          height: '80px'\n        },\n        src: record.albumImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 'auto 20px'\n        },\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  },\n  width: '400px'\n}, {\n  dataIndex: 'artistName',\n  key: 'artistName',\n  title: '歌手',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/artist/${record.artistId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this);\n  },\n  width: '200px'\n}, {\n  dataIndex: 'albumPublishTime',\n  key: 'albumPublishTime',\n  title: '发行时间',\n  width: '100px'\n}];\nexport default function Search(props) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [type, setType] = useState('');\n  const [searchWord, setSearchWord] = useState('');\n  useEffect(() => {\n    const params = new URLSearchParams(props.location.search);\n    const type = params.get('type');\n    const word = params.get('word');\n    axios({\n      method: 'GET',\n      url: SERVER_URL + 'search',\n      params: {}\n    }).then(response => {\n      if (response.data.status === 200) {\n        setType(type);\n        setSearchWord(searchWord);\n        setData(response.data.data);\n      }\n    });\n  }, [props]);\n\n  const handleClick = obj => {\n    props.history.push(`/search/${obj.key}/${searchWord}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      onClick: handleClick,\n      mode: \"horizontal\",\n      selectedKeys: type,\n      children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: \"\\u5355\\u66F2\"\n      }, \"music\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: \"\\u6B4C\\u624B\"\n      }, \"artist\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: \"\\u4E13\\u8F91\"\n      }, \"album\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), type === 'music' && /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: data,\n      columns: musicColomns,\n      pagination: {\n        defaultPageSize: 20\n      },\n      rowKey: record => record.musicId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 34\n    }, this), type === 'artist' && (data[0] ? /*#__PURE__*/_jsxDEV(Row, {\n      gutter: [10, 5],\n      children: data.map((artist, index) => {\n        return /*#__PURE__*/_jsxDEV(Col, {\n          span: 4,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/artist/${artist.artistId}`,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              hoverable: true,\n              cover: /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: artist.artistName,\n                src: artist.artistImg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 56\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(Meta, {\n                title: artist.artistName,\n                style: {\n                  textAlign: 'center'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: [],\n      showHeader: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }, this)), type === 'album' && /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: data,\n      columns: albumColomns,\n      pagination: {\n        defaultPageSize: 20\n      },\n      rowKey: record => record.albumId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Search, \"M42bWuazf9YIkYWkaD/06NWqehs=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["D:/Programming/React/Music_Recommend_System/front/src/pages/Search/index.jsx"],"names":["axios","React","useState","useEffect","Menu","Table","Button","Row","Col","Card","Link","SERVER_URL","playBarStore","Meta","musicColomns","dataIndex","key","title","ellipsis","render","text","record","index","addMusic","padding","width","artistId","albumId","parseInt","min","Math","floor","sec","albumColomns","display","height","albumImg","margin","Search","props","data","setData","type","setType","searchWord","setSearchWord","params","URLSearchParams","location","search","get","word","method","url","then","response","status","handleClick","obj","history","push","defaultPageSize","musicId","map","artist","artistName","artistImg","textAlign"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react'\r\nimport {Menu, Table, Button, Row, Col, Card} from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { SERVER_URL } from '../../utils/constant';\r\nimport {playBarStore} from \"../../stores/playBarStore\";\r\n\r\nconst {Meta} = Card;\r\nconst musicColomns = [\r\n    {\r\n        dataIndex: 'musicName',\r\n        key: 'musicName',\r\n        title: '歌曲',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Button type=\"link\" onClick={() => {\r\n                playBarStore.addMusic(record);\r\n            }} style={{padding: '0'}}>{text}</Button>);\r\n        },\r\n        width: '300px'\r\n    },\r\n    {\r\n        dataIndex: 'artistName',\r\n        key: 'artistName',\r\n        title: '歌手',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/artist/${record.artistId}`}>{text}</Link>);\r\n        },\r\n        width: '200px'\r\n    },\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/album/${record.albumId}`}>{text}</Link>);\r\n        },\r\n        width: '200px'\r\n    },\r\n    {\r\n        dataIndex: 'timeLength',\r\n        key: 'timeLength',\r\n        title: '时长',\r\n        render: (text) => {\r\n            text = parseInt(text);\r\n            text /= 1000;\r\n            var min = Math.floor(text / 60);\r\n            if (min < 10) {\r\n                min = '0' + min;\r\n            }\r\n            var sec = Math.floor(text % 60);\r\n            if (sec < 10) {\r\n                sec = '0' + sec;\r\n            }\r\n            return (<span>{min + ':' + sec}</span>);\r\n        },\r\n        width: '100px'\r\n    }\r\n];\r\n\r\nconst albumColomns = [\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (\r\n            <Link to={`/album/${record.albumId}`} style={{display: 'flex'}}>\r\n                <img alt={text} style={{width: '80px', height: '80px'}} src={record.albumImg} />\r\n                <div style={{margin: 'auto 20px'}}>{text}</div>\r\n            </Link>\r\n            );\r\n        },\r\n        width: '400px'\r\n    },\r\n    {\r\n        dataIndex: 'artistName',\r\n        key: 'artistName',\r\n        title: '歌手',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/artist/${record.artistId}`}>{text}</Link>);\r\n        },\r\n        width: '200px'\r\n    },\r\n    {\r\n        dataIndex: 'albumPublishTime',\r\n        key: 'albumPublishTime',\r\n        title: '发行时间',\r\n        width: '100px'\r\n    }\r\n];\r\n\r\nexport default function Search(props) {\r\n    const [data, setData] = useState([]);\r\n    const [type, setType] = useState('');\r\n    const [searchWord, setSearchWord] = useState('');\r\n\r\n    useEffect(() => {\r\n        const params = new URLSearchParams(props.location.search);\r\n        const type = params.get('type');\r\n        const word = params.get('word');\r\n        axios({\r\n            method: 'GET',\r\n            url: SERVER_URL + 'search',\r\n            params: {\r\n\r\n            }\r\n        }).then((response) => {\r\n            if (response.data.status === 200) {\r\n                setType(type);\r\n                setSearchWord(searchWord);\r\n                setData(response.data.data);\r\n            }\r\n        });\r\n    }, [props]);\r\n\r\n    const handleClick = (obj) => {\r\n        props.history.push(`/search/${obj.key}/${searchWord}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Menu onClick={handleClick} mode=\"horizontal\" selectedKeys={type}>\r\n                <Menu.Item key=\"music\">单曲</Menu.Item>\r\n                <Menu.Item key=\"artist\">歌手</Menu.Item>\r\n                <Menu.Item key=\"album\">专辑</Menu.Item>\r\n            </Menu>\r\n            {type === 'music' && <Table dataSource={data} columns={musicColomns} pagination={{defaultPageSize: 20}} rowKey={record => record.musicId} />}\r\n            {type === 'artist' && (data[0] ? \r\n            <Row gutter={[10, 5]}>\r\n                {data.map((artist, index) => {\r\n                    return (<Col span={4} key={index}>\r\n                        <Link to={`/artist/${artist.artistId}`}>\r\n                                <Card hoverable cover={<img alt={artist.artistName} src={artist.artistImg} />}>\r\n                                        <Meta title={artist.artistName} style={{textAlign: 'center'}} />\r\n                                </Card>\r\n                        </Link>\r\n                    </Col>)\r\n                })}\r\n            </Row>\r\n            : <Table dataSource={[]} showHeader={false} />)}\r\n            {type === 'album' && <Table dataSource={data} columns={albumColomns} pagination={{defaultPageSize: 20}} rowKey={record => record.albumId}/>}\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}