{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Project\\\\MusicRecommendSystem\\\\front\\\\src\\\\pages\\\\SearchResult\\\\index.jsx\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { Menu, Table, Button, Row, Col, Card } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { playMusic } from '../../utils/play';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Meta\n} = Card;\nconst musicColomns = [{\n  dataIndex: 'musicName',\n  key: 'musicName',\n  title: '歌曲',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      onClick: () => {\n        playMusic(record);\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }, this);\n  },\n  width: '500px'\n}, {\n  dataIndex: 'artistName',\n  key: 'artistName',\n  title: '歌手',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this);\n  },\n  width: '400px'\n}, {\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }, this);\n  },\n  width: '400px'\n}, {\n  dataIndex: 'timeLength',\n  key: 'timeLength',\n  title: '时长',\n  render: text => {\n    text = parseInt(text);\n    text /= 1000;\n    var min = Math.floor(text / 60);\n\n    if (min < 10) {\n      min = '0' + min;\n    }\n\n    var sec = Math.floor(text % 60);\n\n    if (sec < 10) {\n      sec = '0' + sec;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: min + ':' + sec\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }, this);\n  },\n  width: '100px'\n}];\nconst albumColomns = [{\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: text,\n        style: {\n          width: '80px',\n          height: '80px'\n        },\n        src: record.albumImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 'auto 10px'\n        },\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  },\n  width: '500px'\n}, {\n  dataIndex: 'artistName',\n  key: 'artistName',\n  title: '歌手',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/artist/${record.artistId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this);\n  },\n  width: '400px'\n}, {\n  dataIndex: 'albumPublishTime',\n  key: 'albumPublishTime',\n  title: '发行时间',\n  width: '200px'\n}];\nexport default class SearchResult extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      type: '',\n      isUpdated: false,\n      word: ''\n    };\n\n    this.handleClick = obj => {\n      this.props.history.push(`/search?word=${this.state.word}&type=${obj.key}`);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      search\n    } = this.props.location;\n    const searchParams = new URLSearchParams(search.substring(1));\n    const word = searchParams.get('word');\n    axios({\n      method: 'GET',\n      url: 'http://localhost:3001/server/search',\n      params: {\n        word: word,\n        type: 'music'\n      }\n    }).then(response => {\n      console.log(response);\n\n      if (response.data.status === 1) {\n        this.setState({\n          data: response.data.data,\n          type: 'music',\n          word: word\n        }, () => {\n          this.setState({\n            isUpdated: true\n          });\n        });\n      }\n    });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      isUpdated: false\n    });\n    const {\n      search\n    } = nextProps.location;\n    const searchParams = new URLSearchParams(search.substring(1));\n    const word = searchParams.get('word');\n    const type = searchParams.get('type');\n    axios({\n      method: 'GET',\n      url: 'http://localhost:3001/server/search',\n      params: {\n        word: word,\n        type: type\n      }\n    }).then(response => {\n      if (response.data.status === 1) {\n        this.setState({\n          type: type,\n          word: word\n        });\n\n        if (type === 'artist') {\n          let i = 0;\n          let newData = [];\n\n          while (i < response.data.data.length) {\n            newData.push(response.data.data.slice(i, Math.min(i + 6, response.data.data.length))); //拆成二维数组，为了下面排版\n\n            i += 6;\n          }\n\n          this.setState({\n            data: newData\n          }, () => {\n            this.setState({\n              isUpdated: true\n            });\n          });\n        } else {\n          this.setState({\n            data: response.data.data\n          }, () => {\n            this.setState({\n              isUpdated: true\n            });\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const {\n      data,\n      type,\n      isUpdated\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Menu, {\n        onClick: this.handleClick,\n        mode: \"horizontal\",\n        defaultSelectedKeys: \"music\",\n        children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n          id: \"music\",\n          children: \"\\u5355\\u66F2\"\n        }, \"music\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n          children: \"\\u6B4C\\u624B\"\n        }, \"artist\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n          children: \"\\u4E13\\u8F91\"\n        }, \"album\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), isUpdated && type === 'music' && /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: data,\n        columns: musicColomns,\n        pagination: {\n          defaultPageSize: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 51\n      }, this), isUpdated && type === 'artist' && (data.length > 0 ? data.map((artistRow, index) => {\n        return /*#__PURE__*/_jsxDEV(Row, {\n          gutter: [10, 5],\n          children: artistRow.map((artist, index) => {\n            return /*#__PURE__*/_jsxDEV(Col, {\n              span: 4,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/artist/${artist.artistId}`,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  hoverable: true,\n                  cover: /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: artist.artistName,\n                    src: artist.artistImg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 68\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(Meta, {\n                    title: artist.artistName,\n                    style: {\n                      textAlign: 'center'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 41\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 33\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: [],\n        showHeader: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 22\n      }, this)), isUpdated && type === 'album' && /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: data,\n        columns: albumColomns,\n        pagination: {\n          defaultPageSize: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["D:/Programming/Project/MusicRecommendSystem/front/src/pages/SearchResult/index.jsx"],"names":["axios","React","Component","Menu","Table","Button","Row","Col","Card","Link","playMusic","Meta","musicColomns","dataIndex","key","title","render","text","record","index","width","albumId","parseInt","min","Math","floor","sec","albumColomns","display","height","albumImg","margin","artistId","SearchResult","state","data","type","isUpdated","word","handleClick","obj","props","history","push","componentDidMount","search","location","searchParams","URLSearchParams","substring","get","method","url","params","then","response","console","log","status","setState","UNSAFE_componentWillReceiveProps","nextProps","i","newData","length","slice","defaultPageSize","map","artistRow","artist","artistName","artistImg","textAlign"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport {Menu, Table, Button, Row, Col, Card} from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { playMusic } from '../../utils/play';\r\n\r\nconst {Meta} = Card;\r\nconst musicColomns = [\r\n    {\r\n        dataIndex: 'musicName',\r\n        key: 'musicName',\r\n        title: '歌曲',\r\n        render: (text, record, index) => {\r\n            return (<Button type=\"link\" onClick={() => {\r\n                playMusic(record);\r\n            }}>{text}</Button>);\r\n        },\r\n        width: '500px'\r\n    },\r\n    {\r\n        dataIndex: 'artistName',\r\n        key: 'artistName',\r\n        title: '歌手',\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/album/${record.albumId}`}>{text}</Link>);\r\n        },\r\n        width: '400px'\r\n    },\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/album/${record.albumId}`}>{text}</Link>);\r\n        },\r\n        width: '400px'\r\n    },\r\n    {\r\n        dataIndex: 'timeLength',\r\n        key: 'timeLength',\r\n        title: '时长',\r\n        render: (text) => {\r\n            text = parseInt(text);\r\n            text /= 1000;\r\n            var min = Math.floor(text / 60);\r\n            if (min < 10) {\r\n                min = '0' + min;\r\n            }\r\n            var sec = Math.floor(text % 60);\r\n            if (sec < 10) {\r\n                sec = '0' + sec;\r\n            }\r\n            return (<span>{min + ':' + sec}</span>);\r\n        },\r\n        width: '100px'\r\n    }\r\n];\r\n\r\nconst albumColomns = [\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        render: (text, record, index) => {\r\n            return (\r\n            <Link to={`/album/${record.albumId}`} style={{display: 'flex'}}>\r\n                <img alt={text} style={{width: '80px', height: '80px'}} src={record.albumImg} />\r\n                <div style={{margin: 'auto 10px'}}>{text}</div>\r\n            </Link>\r\n            );\r\n        },\r\n        width: '500px'\r\n    },\r\n    {\r\n        dataIndex: 'artistName',\r\n        key: 'artistName',\r\n        title: '歌手',\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/artist/${record.artistId}`}>{text}</Link>);\r\n        },\r\n        width: '400px'\r\n    },\r\n    {\r\n        dataIndex: 'albumPublishTime',\r\n        key: 'albumPublishTime',\r\n        title: '发行时间',\r\n        width: '200px'\r\n    }\r\n];\r\n\r\nexport default class SearchResult extends Component {\r\n    state = {data: [], type: '', isUpdated: false, word: ''}\r\n\r\n    componentDidMount() {\r\n        const {search} = this.props.location;\r\n        const searchParams = new URLSearchParams(search.substring(1));\r\n        const word = searchParams.get('word');\r\n        axios({\r\n            method: 'GET',\r\n            url: 'http://localhost:3001/server/search',\r\n            params: {\r\n                word: word,\r\n                type: 'music'\r\n            }\r\n        }).then((response) => {\r\n            console.log(response);\r\n            if (response.data.status === 1) {\r\n                this.setState({data: response.data.data, type: 'music', word: word}, () => {\r\n                    this.setState({isUpdated: true});\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleClick = (obj) => {\r\n        this.props.history.push(`/search?word=${this.state.word}&type=${obj.key}`);\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        this.setState({isUpdated: false});\r\n        const {search} = nextProps.location;\r\n        const searchParams = new URLSearchParams(search.substring(1));\r\n        const word = searchParams.get('word');\r\n        const type = searchParams.get('type');\r\n        axios({\r\n            method: 'GET',\r\n            url: 'http://localhost:3001/server/search',\r\n            params: {\r\n                word: word,\r\n                type: type\r\n            }\r\n        }).then((response) => {\r\n            if (response.data.status === 1) {\r\n                this.setState({type: type, word: word});\r\n                if (type === 'artist') {\r\n                    let i = 0;\r\n                    let newData = [];\r\n                    while (i < response.data.data.length) {\r\n                        newData.push(response.data.data.slice(i, Math.min(i + 6, response.data.data.length)));  //拆成二维数组，为了下面排版\r\n                        i += 6;\r\n                    }\r\n                    this.setState({data: newData}, () => {\r\n                            this.setState({isUpdated: true});\r\n                    });\r\n                } else {\r\n                    this.setState({data: response.data.data}, () => {\r\n                            this.setState({isUpdated: true});\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {data, type, isUpdated} = this.state;\r\n        return (\r\n            <>\r\n                <Menu onClick={this.handleClick} mode=\"horizontal\" defaultSelectedKeys=\"music\">\r\n                    <Menu.Item key=\"music\" id=\"music\">\r\n                        单曲\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"artist\">\r\n                        歌手\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"album\">\r\n                        专辑\r\n                    </Menu.Item>\r\n                </Menu>\r\n                {isUpdated && type === 'music' && <Table dataSource={data} columns={musicColomns} pagination={{defaultPageSize: 20}} />}\r\n                {isUpdated && type === 'artist' && (data.length > 0 ? data.map((artistRow, index) => {\r\n                        return (<Row gutter={[10, 5]} key={index}>\r\n                            {artistRow.map((artist, index) => {\r\n                                return (<Col span={4} key={index}>\r\n                                    <Link to={`/artist/${artist.artistId}`}>\r\n                                            <Card hoverable cover={<img alt={artist.artistName} src={artist.artistImg} />}>\r\n                                                    <Meta title={artist.artistName} style={{textAlign: 'center'}} />\r\n                                            </Card>\r\n                                    </Link>\r\n                                </Col>)\r\n                            })}\r\n                        </Row>);\r\n                }) : <Table dataSource={[]} showHeader={false} />)}\r\n                {isUpdated && type === 'album' && <Table dataSource={data} columns={albumColomns} pagination={{defaultPageSize: 20}} />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}