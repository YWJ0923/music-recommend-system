{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\React\\\\Music_Recommend_System\\\\front\\\\src\\\\pages\\\\MyMusic\\\\Ranking\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Button, Table } from 'antd';\nimport { observer, useLocalObservable } from \"mobx-react\";\nimport { getToken, removeToken } from '../../../utils/auth';\nimport { SERVER_URL } from '../../../utils/constant';\nimport { playBarStore } from \"../../../stores/playBarStore\";\nimport { userStore } from \"../../../stores/userStore\";\nimport { showNotification } from \"../../../utils/common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colomns = [{\n  key: 'index',\n  render: (text, record, index) => {\n    return index + 1;\n  },\n  width: '50px'\n}, {\n  dataIndex: 'musicName',\n  key: 'musicName',\n  title: '歌曲',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      onClick: () => {\n        playBarStore.addMusic(record);\n      },\n      style: {\n        padding: '0'\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this);\n  },\n  width: '300px'\n}, {\n  dataIndex: 'artistName',\n  key: 'artistName',\n  title: '歌手',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/artist/${record.artistId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this);\n  },\n  width: '150px'\n}, {\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  ellipsis: true,\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this);\n  },\n  width: '150px'\n}, {\n  dataIndex: 'userPlayTimes',\n  key: 'userPlayTimes',\n  title: '播放次数',\n  render: text => {\n    return text + '次';\n  },\n  width: '100px'\n}];\n\nfunction Ranking(props) {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useLocalObservable(() => userStore);\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    if (user) {\n      axios({\n        method: 'GET',\n        url: SERVER_URL + 'user/music_ranking',\n        headers: {\n          Authorization: getToken()\n        }\n      }).then(response => {\n        if (response.data.status === 401) {\n          removeToken();\n          setUser(undefined);\n          props.history.push('/');\n          showNotification('请先登录');\n        } else if (response.data.status === 200) {\n          setRanking(response.data.data);\n        } else {\n          props.history.push('/error');\n        }\n      }); // eslint-disable-next-line\n    } else {\n      props.history.push('/');\n      showNotification('请先登录');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: ranking,\n      columns: colomns,\n      title: () => '听歌排行',\n      rowKey: record => record.musicId,\n      pagination: {\n        defaultPageSize: 20\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Ranking, \"yDlJX+Zk8p7YG+VkAt7rDhbiUbw=\", false, function () {\n  return [useLocalObservable];\n});\n\n_c = Ranking;\nexport default _c2 = observer(Ranking);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Ranking\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/Programming/React/Music_Recommend_System/front/src/pages/MyMusic/Ranking/index.jsx"],"names":["React","useEffect","useState","axios","Link","Button","Table","observer","useLocalObservable","getToken","removeToken","SERVER_URL","playBarStore","userStore","showNotification","colomns","key","render","text","record","index","width","dataIndex","title","ellipsis","addMusic","padding","artistId","albumId","Ranking","props","user","setUser","ranking","setRanking","method","url","headers","Authorization","then","response","data","status","undefined","history","push","musicId","defaultPageSize"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button, Table} from 'antd';\r\nimport {observer, useLocalObservable} from \"mobx-react\";\r\nimport { getToken, removeToken } from '../../../utils/auth';\r\nimport { SERVER_URL } from '../../../utils/constant';\r\nimport {playBarStore} from \"../../../stores/playBarStore\";\r\nimport {userStore} from \"../../../stores/userStore\";\r\nimport {showNotification} from \"../../../utils/common\";\r\n\r\nconst colomns = [\r\n    {\r\n        key: 'index',\r\n        render: (text, record, index) => {\r\n            return index + 1;\r\n        },\r\n        width: '50px'\r\n    },\r\n    {\r\n        dataIndex: 'musicName',\r\n        key: 'musicName',\r\n        title: '歌曲',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Button type=\"link\" onClick={() => {\r\n                playBarStore.addMusic(record);\r\n            }} style={{padding: '0'}}>{text}</Button>);\r\n        },\r\n        width: '300px'\r\n    },\r\n    {\r\n        dataIndex: 'artistName',\r\n        key: 'artistName',\r\n        title: '歌手',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/artist/${record.artistId}`}>{text}</Link>);\r\n        },\r\n        width: '150px'\r\n    },\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/album/${record.albumId}`}>{text}</Link>);\r\n        },\r\n        width: '150px'\r\n    },\r\n    {\r\n        dataIndex: 'userPlayTimes',\r\n        key: 'userPlayTimes',\r\n        title: '播放次数',\r\n        render: (text) => {\r\n            return text + '次';\r\n        },\r\n        width: '100px'\r\n    }\r\n]\r\n\r\nfunction Ranking(props) {\r\n    const {user, setUser} = useLocalObservable(() => userStore);\r\n\r\n    const [ranking, setRanking] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        if (user) {\r\n            axios({\r\n                method: 'GET',\r\n                url: SERVER_URL + 'user/music_ranking',\r\n                headers: {\r\n                    Authorization: getToken()\r\n                }\r\n            }).then((response) => {\r\n                if (response.data.status === 401) {\r\n                    removeToken();\r\n                    setUser(undefined);\r\n                    props.history.push('/');\r\n                    showNotification('请先登录');\r\n                } else if (response.data.status === 200) {\r\n                    setRanking(response.data.data);\r\n                } else {\r\n                    props.history.push('/error');\r\n                }\r\n            });  // eslint-disable-next-line\r\n        } else {\r\n            props.history.push('/');\r\n            showNotification('请先登录');\r\n        }\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Table dataSource={ranking} columns={colomns} title={() => '听歌排行'} rowKey={record => record.musicId} pagination={{defaultPageSize: 20}} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default observer(Ranking);"]},"metadata":{},"sourceType":"module"}