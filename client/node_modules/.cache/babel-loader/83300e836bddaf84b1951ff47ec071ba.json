{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Project\\\\MusicRecommendSystem\\\\front\\\\src\\\\pages\\\\Artist\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, Layout, Typography, Menu, Table, Button, Row, Col } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { playMusic } from '../../utils/play';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Paragraph\n} = Typography;\nconst {\n  Content\n} = Layout;\nconst {\n  Meta\n} = Card;\nconst colomns = [{\n  key: 'index',\n  render: (text, record, index) => {\n    return index + 1;\n  }\n}, {\n  dataIndex: 'musicName',\n  key: 'musicName',\n  title: '歌曲',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      type: \"link\",\n      onClick: () => {\n        playMusic(record); // console.log(text);\n        // console.log(record);\n        // console.log(index);\n      },\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this);\n  },\n  width: '500px'\n}, {\n  dataIndex: 'albumName',\n  key: 'albumName',\n  title: '专辑',\n  render: (text, record, index) => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/album/${record.albumId}`,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }, this);\n  },\n  width: '400px'\n}, {\n  dataIndex: 'timeLength',\n  key: 'timeLength',\n  title: '时长',\n  render: text => {\n    text = parseInt(text);\n    text /= 1000;\n    var min = Math.floor(text / 60);\n\n    if (min < 10) {\n      min = '0' + min;\n    }\n\n    var sec = Math.floor(text % 60);\n\n    if (sec < 10) {\n      sec = '0' + sec;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: min + ':' + sec\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }, this);\n  },\n  width: '100px'\n}];\nexport default class Artist extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      musicData: {},\n      albumData: {},\n      type: \"music\",\n      updated: false\n    };\n\n    this.getMusic = () => {\n      this.setState({\n        updated: false\n      });\n      axios({\n        method: 'GET',\n        url: 'http://localhost:3001/server/artist',\n        params: {\n          artistId: this.props.match.params.artistId\n        }\n      }).then(response => {\n        this.setState({\n          musicData: response.data\n        }, () => {\n          this.setState({\n            updated: true\n          });\n        });\n      });\n    };\n\n    this.getAlbum = () => {\n      this.setState({\n        updated: false\n      });\n      axios({\n        method: 'GET',\n        url: 'http://localhost:3001/server/artist/album',\n        params: {\n          artistId: this.props.match.params.artistId\n        }\n      }).then(response => {\n        this.setState({\n          albumData: response.data\n        }, () => {\n          this.setState({\n            updated: true\n          });\n        });\n      });\n    };\n\n    this.getData = obj => {\n      if (obj.key === 'music') {\n        if (JSON.stringify(this.state.musicData) === '{}') {\n          this.getMusic();\n        }\n\n        this.setState({\n          type: 'music'\n        });\n      } else {\n        if (JSON.stringify(this.state.albumData) === '{}') {\n          this.getAlbum();\n        }\n\n        this.setState({\n          type: 'album'\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getMusic();\n  }\n\n  render() {\n    const {\n      musicData,\n      albumData,\n      type,\n      updated\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          height: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: musicData.artistName,\n          src: musicData.artistImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          title: musicData.artistName,\n          style: {\n            overflow: 'scroll',\n            overflowX: 'hidden'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              overflow: 'auto'\n            },\n            children: /*#__PURE__*/_jsxDEV(Paragraph, {\n              ellipsis: {\n                rows: 3,\n                expandable: true,\n                suffix: '...',\n                symbol: '展开'\n              },\n              children: musicData.artistDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Content, {\n        style: {\n          padding: '10px',\n          minHeight: 280\n        },\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          mode: \"horizontal\",\n          defaultSelectedKeys: \"music\",\n          onClick: this.getData,\n          children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n            children: \"\\u5355\\u66F2\"\n          }, \"music\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n            children: \"\\u4E13\\u8F91\"\n          }, \"album\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), type === 'music' ? updated && /*#__PURE__*/_jsxDEV(Table, {\n          columns: colomns,\n          dataSource: this.state.musicData.musicVOList,\n          showHeader: false,\n          pagination: {\n            defaultPageSize: 20\n          },\n          rowKey: record => record.musicId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 32\n        }, this) : updated && /*#__PURE__*/_jsxDEV(Row, {\n          gutter: 10,\n          children: albumData.artistAlbumVOList.map(album => {\n            return /*#__PURE__*/_jsxDEV(Col, {\n              span: 6,\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/album/${album.albumId}`,\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  hoverable: true,\n                  cover: /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: album.albumName,\n                    src: album.albumImg\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 60\n                  }, this),\n                  children: /*#__PURE__*/_jsxDEV(Meta, {\n                    title: album.albumName,\n                    style: {\n                      textAlign: 'center'\n                    },\n                    description: album.albumPublishTime\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["D:/Programming/Project/MusicRecommendSystem/front/src/pages/Artist/index.jsx"],"names":["React","Component","axios","Card","Layout","Typography","Menu","Table","Button","Row","Col","Link","playMusic","Paragraph","Content","Meta","colomns","key","render","text","record","index","dataIndex","title","width","albumId","parseInt","min","Math","floor","sec","Artist","state","musicData","albumData","type","updated","getMusic","setState","method","url","params","artistId","props","match","then","response","data","getAlbum","getData","obj","JSON","stringify","componentDidMount","display","height","artistName","artistImg","overflow","overflowX","rows","expandable","suffix","symbol","artistDescription","padding","minHeight","musicVOList","defaultPageSize","musicId","artistAlbumVOList","map","album","albumName","albumImg","textAlign","albumPublishTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { Card, Layout, Typography, Menu, Table, Button, Row, Col } from 'antd';\r\nimport {Link} from 'react-router-dom';\r\nimport { playMusic } from '../../utils/play';\r\n\r\nconst { Paragraph } = Typography;\r\nconst {Content} = Layout;\r\nconst {Meta} = Card;\r\n\r\nconst colomns = [\r\n    {\r\n        key: 'index',\r\n        render: (text,record,index) => {return index + 1;}\r\n    },\r\n    {\r\n        dataIndex: 'musicName',\r\n        key: 'musicName',\r\n        title: '歌曲',\r\n        render: (text, record, index) => {\r\n            return (<Button type=\"link\" onClick={() => {\r\n                playMusic(record);\r\n                // console.log(text);\r\n                // console.log(record);\r\n                // console.log(index);\r\n            }}>{text}</Button>);\r\n        },\r\n        width: '500px'\r\n    },\r\n    {\r\n        dataIndex: 'albumName',\r\n        key: 'albumName',\r\n        title: '专辑',\r\n        render: (text, record, index) => {\r\n            return (<Link to={`/album/${record.albumId}`}>{text}</Link>);\r\n        },\r\n        width: '400px'\r\n    },\r\n    {\r\n        dataIndex: 'timeLength',\r\n        key: 'timeLength',\r\n        title: '时长',\r\n        render: (text) => {\r\n            text = parseInt(text);\r\n            text /= 1000;\r\n            var min = Math.floor(text / 60);\r\n            if (min < 10) {\r\n                min = '0' + min;\r\n            }\r\n            var sec = Math.floor(text % 60);\r\n            if (sec < 10) {\r\n                sec = '0' + sec;\r\n            }\r\n            return (<span>{min + ':' + sec}</span>);\r\n        },\r\n        width: '100px'\r\n    }\r\n];\r\n\r\nexport default class Artist extends Component {\r\n    state = {musicData: {}, albumData: {}, type: \"music\", updated: false};\r\n\r\n    componentDidMount() {\r\n        this.getMusic();\r\n    }\r\n\r\n    getMusic = () => {\r\n        this.setState({updated: false});\r\n        axios({\r\n            method: 'GET',\r\n            url: 'http://localhost:3001/server/artist',\r\n            params: {\r\n                artistId: this.props.match.params.artistId\r\n            }\r\n        }).then((response) => {\r\n            this.setState({musicData: response.data}, () => {\r\n                this.setState({updated: true});\r\n            });\r\n        });\r\n    }\r\n\r\n    getAlbum = () => {\r\n        this.setState({updated: false});\r\n        axios({\r\n            method: 'GET',\r\n            url: 'http://localhost:3001/server/artist/album',\r\n            params: {\r\n                artistId: this.props.match.params.artistId\r\n            }\r\n        }).then((response) => {\r\n            this.setState({albumData: response.data}, () => {\r\n                this.setState({updated: true});\r\n            });\r\n        });\r\n    }\r\n\r\n    getData = (obj) => {\r\n        if (obj.key === 'music') {\r\n            if (JSON.stringify(this.state.musicData) === '{}') {\r\n                this.getMusic();\r\n            }\r\n            this.setState({type: 'music'});\r\n        } else {\r\n            if (JSON.stringify(this.state.albumData) === '{}') {\r\n                this.getAlbum();\r\n            }\r\n            this.setState({type: 'album'});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {musicData, albumData, type, updated} = this.state;\r\n        return (\r\n            <>\r\n                <div style={{display: 'flex', height: '200px'}}>\r\n                    <img alt={musicData.artistName} src={musicData.artistImg} />\r\n                    <Card title={musicData.artistName} style={{overflow: 'scroll', overflowX: 'hidden'}}>\r\n                        <div style={{overflow: 'auto'}}>\r\n                            <Paragraph ellipsis={{rows: 3, expandable: true, suffix: '...', symbol: '展开'}}>\r\n                                {musicData.artistDescription}\r\n                            </Paragraph>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n                <Content style={{ padding: '10px', minHeight: 280}}>\r\n                    <Menu mode=\"horizontal\" defaultSelectedKeys=\"music\" onClick={this.getData}>\r\n                        <Menu.Item key=\"music\">\r\n                            单曲\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"album\">\r\n                            专辑\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                    {type === 'music' ? \r\n                    updated && <Table columns={colomns} dataSource={this.state.musicData.musicVOList} showHeader={false} pagination={{defaultPageSize: 20}} rowKey={record => record.musicId} />\r\n                    : updated && <Row gutter={10}>\r\n                        {albumData.artistAlbumVOList.map((album) => {\r\n                            return (<Col span={6}>\r\n                                <Link to={`/album/${album.albumId}`}>\r\n                                    <Card hoverable cover={<img alt={album.albumName} src={album.albumImg} />}>\r\n                                            <Meta title={album.albumName} style={{textAlign: 'center'}} description={album.albumPublishTime} />\r\n                                    </Card>\r\n                                </Link>\r\n                            </Col>)\r\n                        })}\r\n                    </Row>}\r\n                </Content>\r\n            </>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}